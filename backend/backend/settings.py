"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
import re
import pathlib
import sys
from pathlib import Path
from datetime import timedelta

from .constants import HYDRA_VISION_PERSONALITY_NAME
from .personality import HydraScopePersonality
from core.enums import AppEnvironmentEnum, get_and_validate_var_value_from_env

BASE_DIR = os.path.dirname((os.path.dirname(os.path.abspath(__file__))))


try:
    from .used_personality import used_personality
except ImportError:
    used_personality = HydraScopePersonality()
    # print('no personality set using HydraScope per default (use "make set_hydra[vision|scope]_personality" to change the active personality)')

# custom user model
# (exists in the HydraVision and HydraScope context but is only "really" used for HydraVision)
AUTH_USER_MODEL = 'core.User'

PRODUCT_PERSONALITY = used_personality

# NOTE: this is the version shown in the UI. In addition to that the installer version must
#       also be set to the same value, it can be found in "electron_app/package.json" - "buildVersion"
# we use a custom version string consisting of the year month day hour minute of the release
# (e.g. 202212141513)
RELEASE_VERSION = "000000000000"

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Fetch information if we are running in a pyinstaller bundle
RUNNING_IN_BUNDLE = getattr(sys, 'frozen', False)

# Set var for communicating with the frontend about the env
APP_ENVIRONMENT = get_and_validate_var_value_from_env('APP_ENVIRONMENT',
                                                      'production' if RUNNING_IN_BUNDLE else 'development',
                                                      AppEnvironmentEnum)

# Get the database / scan_run results folder / ... from environment variables
# (this variables are set by the electron "wrapper")
MEDIA_ROOT = os.environ.get('MEDIA_ROOT_FOLDER', f'{BASE_DIR}/')
DATABASE_FOLDER = os.environ.get('SCANNER_DATABASE_FOLDER', BASE_DIR)
SCAN_RESULTS_FOLDER_PATH = pathlib.Path('results')
SCAN_RESULTS_FOLDER = os.path.join(MEDIA_ROOT, SCAN_RESULTS_FOLDER_PATH)
LOG_FILES_FOLDER_PATH = pathlib.Path('logfiles')
LOG_FILES_FOLDER = os.path.join(MEDIA_ROOT, LOG_FILES_FOLDER_PATH)
PICKLE_FILES_FOLDER_PATH = pathlib.Path('uds_pickles')
PICKLE_FILES_FOLDER = os.path.join(MEDIA_ROOT, PICKLE_FILES_FOLDER_PATH)
JOB_ARCHIVES_FOLDER_PATH = pathlib.Path('job_archives')
JOB_ARCHIVES_FOLDER = os.path.join(MEDIA_ROOT, JOB_ARCHIVES_FOLDER_PATH)
JOB_ARTIFACTS_FOLDER_PATH = pathlib.Path('job_artifacts')
JOB_ARTIFACTS_FOLDER = os.path.join(MEDIA_ROOT, JOB_ARTIFACTS_FOLDER_PATH)
HYDRACORE_DOCS_FOLDER_PATH = pathlib.Path('hydracore_docs')
HYDRACORE_DOCS_FOLDER = os.path.join(MEDIA_ROOT, HYDRACORE_DOCS_FOLDER_PATH)
REDIS_SERVER_PORT = os.environ.get('REDIS_SERVER_PORT', 6379)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '# SECURITY WARNING: keep the secret key used in production secret!'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'channels',
    'djangochannelsrestframework',
    'corsheaders',
    'rest_framework',
    'core',
    'scanner',
    
]

if PRODUCT_PERSONALITY.name == HYDRA_VISION_PERSONALITY_NAME:
    # enabled jwt token blacklisting for hydravision
    INSTALLED_APPS.append('rest_framework_simplejwt.token_blacklist')

if not RUNNING_IN_BUNDLE:
    # NOTE: the rest framework and admin pages will not work properly without this
    #       (no static content like css is "available")
    #       problem is that the "serve static reactjs components" handling breaks if its enabled
    INSTALLED_APPS.append('django.contrib.staticfiles')

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'backend.middleware.RESTDynamicAllowedHostsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'backend.middleware.RESTLogExceptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(DATABASE_FOLDER, f'{PRODUCT_PERSONALITY.name.lower()}_db.sqlite3'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

if RUNNING_IN_BUNDLE:
    STATIC_URL = '/'
    STATIC_ROOT = os.path.join(BASE_DIR, 'static/')
else:
    STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# cors

# allow also for hydrascope
CORS_ALLOW_ALL_ORIGINS = True

# channels

ASGI_APPLICATION = 'backend.asgi.application'
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('127.0.0.1', REDIS_SERVER_PORT)],
            "capacity": 1000,
            "expiry": 20,
        },
    },
}

REST_FRAMEWORK = {
    'DATETIME_FORMAT': "%Y-%m-%dT%H:%M:%S.%fZ",
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,

    'AUTH_HEADER_TYPES': ('Bearer', 'JWT',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),

    'UPDATE_LAST_LOGIN': True,
}

# see backend.middleware.DynamicAllowedHostsMiddleware / ALLOWED_HOSTS_PER_URL for the actual check
ALLOWED_HOSTS = ['*']

# allow requests from everywhere also for hydrascope
ALLOWED_HOSTS_PER_URL = ((re.compile(r'.*'), re.compile(r'.*')),     # always allow all requests from anywhere
                         )
# if PRODUCT_PERSONALITY.name == HYDRA_VISION_PERSONALITY_NAME:
#     ALLOWED_HOSTS_PER_URL = ((re.compile(r'.*'), re.compile(r'.*')),     # always allow all requests from anywhere
#                              )
# else:
#     ALLOWED_HOSTS_PER_URL = ((re.compile(r'127(?:\..+){3}'), re.compile(r'.*')),            # always allow all requests from localhost
#                              (re.compile(r'.+'), re.compile(r'^.*/ws/remoterunner/.+$'))    # allow requests for the remote runner api from everywhere
#                              )

# https://docs.djangoproject.com/en/4.1/topics/logging/#examples
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'WARNING',
    },
    # 'loggers': {
    #     'django': {
    #         'handlers': ['console'],
    #         'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
    #         'propagate': False,
    #     },
    # },
}

if not RUNNING_IN_BUNDLE:
    LOGGING['root']['level'] = 'INFO'

# path to the frozen scanner binary

SCANNER_BINARY = ""
SCANNER_BINARY_PATH = os.environ.get('SCANNER_BINARY_PATH',
                                     str(BASE_DIR.parent / 'scanner-backend' / 'dist' / SCANNER_BINARY))
